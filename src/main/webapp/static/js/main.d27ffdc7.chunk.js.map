{"version":3,"sources":["components/TutorialHeader/index.js","components/TutorialHeader/TutorialHeader.js","content/LandingPage/LandingPage.js","content/LandingPage/index.js","content/RepoPage/RepoTable.js","content/RepoPage/RepoPage.js","content/RepoPage/index.js","App.js","serviceWorker.js","index.js"],"names":["TutorialHeader","react_default","a","createElement","UIShell","aria-label","element","Link","to","prefix","props","selected","triggerHref","role","href","tabIndex","LandingPage","_useState","useState","_useState2","Object","slicedToArray","testMessage","setTestMessage","_useState3","_useState4","toastProps","setToastProps","showAndHideToast","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","showToast","Promise","resolve","setTimeout","hideToast","stop","_x","apply","this","arguments","currentProps","concat","filter","prop","b","aProps","getOwnPropertyNames","bProps","length","i","propName","arePropsEqual","sendLocalMessage","_ref2","_callee2","message","response","result","responseProps","_context2","axios","get","window","location","origin","sent","data","title","subtitle","caption","kind","_x2","sendRemoteMessage","_ref3","_callee3","_context3","_x3","receiveMessage","_ref4","_callee4","_context4","toString","indexOf","sendMQMessage","_ref5","_callee5","_context5","_x4","receiveMQMessage","_ref6","_callee6","_context6","produceMessageForBean","_ref7","_callee7","_context7","_x5","className","Breadcrumb","noTrailingSlash","BreadcrumbItem","Tabs","assign","Tab","label","TextInput","labelText","id","value","onChange","e","target","Button","onClick","disabled","src","process","alt","map","Notification","RepoTable","rows","headers","getRowDescription","rowId","row","find","description","DataTable","render","getHeaderProps","getRowProps","getTableProps","TableContainer","Table","TableHead","TableRow","TableExpandHeader","header","TableHeader","TableBody","Fragment","key","TableExpandRow","cells","cell","TableCell","TableExpandedRow","colSpan","REPO_QUERY","gql","_templateObject","LinkList","url","homepageUrl","style","display","RepoPage","totalItems","setTotalItems","firstRowIndex","setFirstRowIndex","_useState5","_useState6","currentPageSize","setCurrentPageSize","react_apollo_esm","query","loading","error","organization","DataTableSkeleton","columnCount","rowCount","repositories","totalCount","objectSpread","stars","stargazers","issueCount","issues","createdAt","Date","toLocaleDateString","updatedAt","links","RepoPage_LinkList","getRowItems","nodes","RepoPage_RepoTable","slice","Pagination","backwardText","forwardText","pageSize","pageSizes","itemsPerPageText","page","App","components_TutorialHeader","react_router","exact","path","component","Component","Boolean","hostname","match","client","ApolloClient","uri","authorization","ReactDOM","react_router_dom","basename","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d27ffdc7.chunk.js","sourcesContent":["import TutorialHeader from './TutorialHeader';\nexport default TutorialHeader;\n","import React from 'react';\nimport {\n  Header,\n  HeaderName,\n  HeaderNavigation,\n  HeaderMenuItem,\n  HeaderGlobalBar,\n  HeaderGlobalAction,\n  SkipToContent,\n} from 'carbon-components-react/lib/components/UIShell';\nimport Notification20 from '@carbon/icons-react/lib/notification/20';\nimport UserAvatar20 from '@carbon/icons-react/lib/user--avatar/20';\nimport AppSwitcher20 from '@carbon/icons-react/lib/app-switcher/20';\nimport { Link } from 'react-router-dom';\n\nconst TutorialHeader = () => (\n  <Header aria-label=\"Carbon Tutorial\">\n    <SkipToContent />\n    <HeaderName element={Link} to=\"/\" prefix=\"JMS\">\n      Workbench\n    </HeaderName>\n    <HeaderNavigation aria-label=\"Carbon Tutorial\">\n      <HeaderMenuItem element={Link} to=\"/repos\">\n        Repositories\n      </HeaderMenuItem>\n    </HeaderNavigation>\n  </Header>\n);\n\nexport default TutorialHeader;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Tabs,\n  Tab,\n  TextInput,\n  ToastNotification\n} from 'carbon-components-react';\nimport axios from 'axios';\n\nconst props = {\n  tabs: {\n    selected: 0,\n    triggerHref: '#',\n    role: 'navigation',\n  },\n  tab: {\n    href: '#',\n    role: 'presentation',\n    tabIndex: 0,\n  },\n};\n\nconst LandingPage = () => {\n  const [testMessage, setTestMessage] = useState('');\n  const [toastProps, setToastProps] = useState([]);\n\n  const arePropsEqual = (a, b) => {\n    // Create arrays of property names\n    let aProps = Object.getOwnPropertyNames(a);\n    let bProps = Object.getOwnPropertyNames(b);\n\n    // If number of properties is different,\n    // objects are not equivalent\n    if (aProps.length !== bProps.length) {\n      return false;\n    }\n\n    for (let i = 0; i < aProps.length; i++) {\n      let propName = aProps[i];\n\n      // If values of same property are not equal,\n      // objects are not equivalent\n      if (a[propName] !== b[propName]) {\n        return false;\n      }\n    }\n\n    // If we made it this far, objects\n    // are considered equivalent\n    return true;\n  };\n\n  const showAndHideToast = async (props) => {\n    showToast(props);\n    await new Promise((resolve) => setTimeout(resolve, 5000));\n    hideToast(props);\n  };\n\n  const showToast = (props) => {\n    setToastProps(currentProps => currentProps.concat([props]));\n  };\n\n  const hideToast = (props) => {\n    setToastProps(currentProps => currentProps.filter(prop => !arePropsEqual(prop, props)));\n  };\n\n  const sendLocalMessage = async (message) => {\n    const response = await axios.get(`${window.location.origin}/jms/rest/local/echo/${message}`);\n    const result = response.data;\n    const responseProps = {\n      title: 'Response',\n      subtitle: 'Local queue',\n      caption: result[0],\n      kind: 'success'\n    };\n\n    await showAndHideToast(responseProps);\n  };\n\n  const sendRemoteMessage = async (message) => {\n    const response = await axios.get(`${window.location.origin}/jms/rest/remote/send/${message}`);\n    const result = response.data;\n    const responseProps = {\n      title: 'Status',\n      subtitle: 'Remote queue',\n      caption: result[0],\n      kind: 'success'\n    };\n\n    await showAndHideToast(responseProps);\n  };\n\n  const receiveMessage = async () => {\n    const response = await axios.get(`${window.location.origin}/jms/rest/remote/receive`);\n    let props = {};\n    if (response.data.toString().indexOf('error') !== -1) {\n      props = {\n        title: 'Receive Failed',\n        subtitle: 'Remote queue',\n        caption: response.data,\n        kind: 'error'\n      }\n    } else {\n      props = {\n        title: 'Response',\n        subtitle: 'Remote queue',\n        caption: response.data[0],\n        kind: 'success'\n      }\n    }\n\n    await showAndHideToast(props);\n  };\n\n  const sendMQMessage = async (message) => {\n    const response = await axios.get(`${window.location.origin}/jms/rest/mq/send/${message}`);\n    const result = response.data;\n    const responseProps = {\n      title: 'Status',\n      subtitle: 'Remote queue',\n      caption: result[0],\n      kind: 'success'\n    };\n\n    await showAndHideToast(responseProps);\n  };\n\n  const receiveMQMessage = async () => {\n    const response = await axios.get(`${window.location.origin}/jms/rest/mq/receive`);\n    let props = {};\n    if (response.data.toString().indexOf('error') !== -1) {\n      props = {\n        title: 'Receive Failed',\n        subtitle: 'Remote queue',\n        caption: response.data,\n        kind: 'error'\n      }\n    } else {\n      props = {\n        title: 'Response',\n        subtitle: 'Remote queue',\n        caption: response.data[0],\n        kind: 'success'\n      }\n    }\n\n    await showAndHideToast(props);\n  };\n\n  const produceMessageForBean = async (message) => {\n    const response = await axios.get(`${window.location.origin}/jms/rest/mdb/local/do_message/${message}`);\n    const result = response.data;\n    const responseProps = {\n      title: 'Status',\n      subtitle: 'Local message producer',\n      caption: result[0],\n      kind: 'success'\n    };\n\n    await showAndHideToast(responseProps)\n  };\n\n  const renderToast = () => {\n      return (\n        <div>\n          {toastProps.map((prop) => (\n            <ToastNotification {...prop} />\n          ))}\n        </div>\n      )\n  };\n\n  return (\n    <div className=\"bx--grid bx--grid--full-width landing-page\">\n      <div className=\"bx--row landing-page__banner\">\n        <div className=\"bx--col-lg-16\">\n          <Breadcrumb noTrailingSlash aria-label=\"Page navigation\">\n            <BreadcrumbItem>\n              <a href=\"/\">JMS Workbench</a>\n            </BreadcrumbItem>\n          </Breadcrumb>\n          <h1 className=\"landing-page__heading\">\n            Test JMS Resources\n          </h1>\n        </div>\n      </div>\n      <div className=\"bx--row landing-page__r2\">\n        <div className=\"bx--col bx--no-gutter\">\n          <Tabs {...props.tabs} aria-label=\"Tab navigation\">\n            <Tab {...props.tab} label=\"Local Queue\">\n              <div className=\"bx--grid bx--grid--no-gutter bx--grid--full-width\">\n                <div className=\"bx--row landing-page__tab-content\">\n                  <div className=\"bx--col-md-4 bx--col-lg-7\">\n                    <h2 className=\"landing-page__subheading\">\n                      Local Queue Test\n                    </h2>\n                    <p className=\"landing-page__p\">\n                      This will send a message and return what was received.\n                    </p>\n                    <div className=\"landing-page__form\">\n                      <TextInput labelText={'Message to send'} id={'localTestText'} value={testMessage}\n                                 onChange={(e) => setTestMessage(e.target.value)}/>\n                      <Button onClick={() => sendLocalMessage(testMessage)} disabled={testMessage.length === 0}>Test local queue</Button>\n                    </div>\n                  </div>\n                  <div className=\"bx--col-md-4 bx--offset-lg-1 bx--col-lg-8\">\n                    <img\n                      className=\"landing-page__illo\"\n                      src={`${process.env.PUBLIC_URL}/tab-illo.png`}\n                      alt=\"Carbon illustration\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </Tab>\n            <Tab {...props.tab} label=\"Remote Queue\">\n              <div className=\"bx--grid bx--grid--no-gutter bx--grid--full-width\">\n                <div className=\"bx--row landing-page__tab-content\">\n                  <div className=\"bx--col-md-4 bx--col-lg-7\">\n                    <h2 className=\"landing-page__subheading\">\n                      Remote Queue Test\n                    </h2>\n                    <p className=\"landing-page__p\">\n                      Send messages to the queue, then retrieve them. The queue is accessed remotely over the JMS endpoint.\n                    </p>\n                    <div className=\"landing-page__form\">\n                      <TextInput labelText={'Message to send'} id={'remoteTestText'} value={testMessage}\n                                 onChange={(e) => setTestMessage(e.target.value)} />\n                      <div className=\"landing-page__button-array\">\n                        <Button onClick={() => sendRemoteMessage(testMessage)} disabled={testMessage.length === 0}>Send message to remote queue</Button>\n                        <Button onClick={() => receiveMessage()} >Attempt to receive message from remote queue</Button>\n                      </div>\n\n                    </div>\n                  </div>\n                  <div className=\"bx--col-md-4 bx--offset-lg-1 bx--col-lg-8\">\n                    <img\n                      className=\"landing-page__illo\"\n                      src={`${process.env.PUBLIC_URL}/tab-illo.png`}\n                      alt=\"Carbon illustration\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </Tab>\n            <Tab {...props.tab} label=\"MDBs\">\n              <div className=\"bx--grid bx--grid--no-gutter bx--grid--full-width\">\n                <div className=\"bx--row landing-page__tab-content\">\n                  <div className=\"bx--col-md-4 bx--col-lg-7\">\n                    <h2 className=\"landing-page__subheading\">\n                      Message-driven bean test\n                    </h2>\n                    <p className=\"landing-page__p\">\n                      This will send a message; an MDB should be activated and print a message to the server logs.\n                    </p>\n                    <div className=\"landing-page__form\">\n                      <TextInput labelText={'Message to send'} id={'localTestText'} value={testMessage}\n                                 onChange={(e) => setTestMessage(e.target.value)}/>\n                      <Button onClick={() => produceMessageForBean(testMessage)} disabled={testMessage.length === 0}>Create message for bean</Button>\n                    </div>\n                  </div>\n                  <div className=\"bx--col-md-4 bx--offset-lg-1 bx--col-lg-8\">\n                    <img\n                      className=\"landing-page__illo\"\n                      src={`${process.env.PUBLIC_URL}/tab-illo.png`}\n                      alt=\"Carbon illustration\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </Tab>\n            <Tab {...props.tab} label=\"IBM MQ Queue\">\n              <div className=\"bx--grid bx--grid--no-gutter bx--grid--full-width\">\n                <div className=\"bx--row landing-page__tab-content\">\n                  <div className=\"bx--col-md-4 bx--col-lg-7\">\n                    <h2 className=\"landing-page__subheading\">\n                      Remote Queue Test\n                    </h2>\n                    <p className=\"landing-page__p\">\n                      Send messages to MQ, then retrieve them. The queue is accessed remotely over the MQ endpoint.\n                    </p>\n                    <div className=\"landing-page__form\">\n                      <TextInput labelText={'Message to send'} id={'remoteTestText'} value={testMessage}\n                                 onChange={(e) => setTestMessage(e.target.value)} />\n                      <div className=\"landing-page__button-array\">\n                        <Button onClick={() => sendMQMessage(testMessage)} disabled={testMessage.length === 0}>Send message to remote queue</Button>\n                        <Button onClick={() => receiveMQMessage()} >Attempt to receive message from remote queue</Button>\n                      </div>\n\n                    </div>\n                  </div>\n                  <div className=\"bx--col-md-4 bx--offset-lg-1 bx--col-lg-8\">\n                    <img\n                      className=\"landing-page__illo\"\n                      src={`${process.env.PUBLIC_URL}/tab-illo.png`}\n                      alt=\"Carbon illustration\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </Tab>\n          </Tabs>\n        </div>\n      </div>\n      <div className=\"landing-page__toast\">\n        { renderToast() }\n      </div>\n    </div>\n\n  );\n};\n\nexport default LandingPage;\n","import LandingPage from './LandingPage';\nexport default LandingPage;\n","import React from 'react';\nimport {\n  DataTable,\n  TableContainer,\n  Table,\n  TableHead,\n  TableRow,\n  TableExpandHeader,\n  TableHeader,\n  TableBody,\n  TableExpandRow,\n  TableCell,\n  TableExpandedRow,\n} from 'carbon-components-react';\n\nconst RepoTable = ({ rows, headers }) => {\n  const getRowDescription = rowId => {\n    const row = rows.find(({ id }) => id === rowId);\n    return row ? row.description : '';\n  };\n\n  return (\n    <DataTable\n      rows={rows}\n      headers={headers}\n      render={({\n        rows,\n        headers,\n        getHeaderProps,\n        getRowProps,\n        getTableProps,\n      }) => (\n        <TableContainer\n          title=\"Carbon Repositories\"\n          description=\"A collection of public Carbon repositories.\">\n          <Table {...getTableProps()}>\n            <TableHead>\n              <TableRow>\n                <TableExpandHeader />\n                {headers.map(header => (\n                  <TableHeader {...getHeaderProps({ header })}>\n                    {header.header}\n                  </TableHeader>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.map(row => (\n                <React.Fragment key={row.id}>\n                  <TableExpandRow {...getRowProps({ row })}>\n                    {row.cells.map(cell => (\n                      <TableCell key={cell.id}>{cell.value}</TableCell>\n                    ))}\n                  </TableExpandRow>\n                  <TableExpandedRow colSpan={headers.length + 1}>\n                    <p>{getRowDescription(row.id)}</p>\n                  </TableExpandedRow>\n                </React.Fragment>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      )}\n    />\n  );\n};\n\nexport default RepoTable;\n","import React, { useState } from 'react';\nimport RepoTable from './RepoTable';\nimport { gql } from 'apollo-boost';\nimport { Query } from 'react-apollo';\nimport { Link, DataTableSkeleton, Pagination } from 'carbon-components-react';\n\nconst REPO_QUERY = gql`\n  query REPO_QUERY {\n    # Let's use carbon as our organization\n    organization(login: \"carbon-design-system\") {\n      # We'll grab all the repositories in one go. To load more resources\n      # continuously, see the advanced topics.\n      repositories(first: 75, orderBy: { field: UPDATED_AT, direction: DESC }) {\n        totalCount\n        nodes {\n          url\n          homepageUrl\n          issues(filterBy: { states: OPEN }) {\n            totalCount\n          }\n          stargazers {\n            totalCount\n          }\n          releases(first: 1) {\n            totalCount\n            nodes {\n              name\n            }\n          }\n          name\n          updatedAt\n          createdAt\n          description\n          id\n        }\n      }\n    }\n  }\n`;\n\nconst headers = [\n  {\n    key: 'name',\n    header: 'Name',\n  },\n  {\n    key: 'createdAt',\n    header: 'Created',\n  },\n  {\n    key: 'updatedAt',\n    header: 'Updated',\n  },\n  {\n    key: 'issueCount',\n    header: 'Open Issues',\n  },\n  {\n    key: 'stars',\n    header: 'Stars',\n  },\n  {\n    key: 'links',\n    header: 'Links',\n  },\n];\n\nconst LinkList = ({ url, homepageUrl }) => (\n  <ul style={{ display: 'flex' }}>\n    <li>\n      <Link href={url}>GitHub</Link>\n    </li>\n    {homepageUrl && (\n      <li>\n        <span>&nbsp;|&nbsp;</span>\n        <Link href={homepageUrl}>Homepage</Link>\n      </li>\n    )}\n  </ul>\n);\n\nconst getRowItems = rows =>\n  rows.map(row => ({\n    ...row,\n    key: row.id,\n    stars: row.stargazers.totalCount,\n    issueCount: row.issues.totalCount,\n    createdAt: new Date(row.createdAt).toLocaleDateString(),\n    updatedAt: new Date(row.updatedAt).toLocaleDateString(),\n    links: <LinkList url={row.url} homepageUrl={row.homepageUrl} />,\n  }));\n\nconst RepoPage = () => {\n  const [totalItems, setTotalItems] = useState(0);\n  const [firstRowIndex, setFirstRowIndex] = useState(0);\n  const [currentPageSize, setCurrentPageSize] = useState(10);\n\n  return (\n    <div className=\"bx--grid bx--grid--full-width bx--grid--no-gutter repo-page\">\n      <div className=\"bx--row repo-page__r1\">\n        <div className=\"bx--col-lg-16\">\n          <Query query={REPO_QUERY}>\n            {({ loading, error, data: { organization } }) => {\n              // Wait for the request to complete\n              if (loading)\n                return (\n                  <DataTableSkeleton\n                    columnCount={headers.length + 1}\n                    rowCount={10}\n                    headers={headers}\n                  />\n                );\n\n              // Something went wrong with the data fetching\n              if (error) return `Error! ${error.message}`;\n\n              // If we're here, we've got our data!\n              const { repositories } = organization;\n              setTotalItems(repositories.totalCount);\n              const rows = getRowItems(repositories.nodes);\n\n              return (\n                <>\n                  <RepoTable\n                    headers={headers}\n                    rows={rows.slice(\n                      firstRowIndex,\n                      firstRowIndex + currentPageSize\n                    )}\n                  />\n                  <Pagination\n                    totalItems={totalItems}\n                    backwardText=\"Previous page\"\n                    forwardText=\"Next page\"\n                    pageSize={currentPageSize}\n                    pageSizes={[5, 10, 15, 25]}\n                    itemsPerPageText=\"Items per page\"\n                    onChange={({ page, pageSize }) => {\n                      if (pageSize !== currentPageSize) {\n                        setCurrentPageSize(pageSize);\n                      }\n                      setFirstRowIndex(pageSize * (page - 1));\n                    }}\n                  />\n                </>\n              );\n            }}\n          </Query>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RepoPage;\n","import RepoPage from './RepoPage';\nexport default RepoPage;\n","import React, { Component } from 'react';\nimport './app.scss';\nimport { Content } from 'carbon-components-react/lib/components/UIShell';\nimport TutorialHeader from './components/TutorialHeader';\nimport { Route, Switch } from 'react-router-dom';\nimport LandingPage from './content/LandingPage';\nimport RepoPage from './content/RepoPage';\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <TutorialHeader />\n        <Content>\n          <Switch>\n            <Route exact path=\"/\" component={LandingPage} />\n            <Route path=\"/repos\" component={RepoPage} />\n          </Switch>\n        </Content>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'core-js/modules/es7.array.includes';\nimport 'core-js/modules/es6.array.fill';\nimport 'core-js/modules/es6.string.includes';\nimport 'core-js/modules/es6.string.trim';\nimport 'core-js/modules/es7.object.values';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\nconst client = new ApolloClient({\n  uri: 'https://api.github.com/graphql',\n  headers: {\n    authorization: `Bearer ${\n      process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN\n    }`,\n  },\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Router basename={'/jms'}>\n      <App />\n    </Router>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}